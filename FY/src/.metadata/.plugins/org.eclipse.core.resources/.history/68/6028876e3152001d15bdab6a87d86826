package dataModel;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.TreeMap;

import dataModel.helpers.BotAnalsis;
import dataModel.helpers.Database;
import dataModel.helpers.IPFunctions;
import dataModel.helpers.Modifiers;
import main.LogData;

/**
 * @author 16018262
 * @version 14 Dec 2019
 */
public class Analise {
	private  Database database;
	/**
	 * Small method to aid in the analysis of URL's by changing all the inputs to lower case
	 * @param str The string to check
	 * @param sub The substring that we are looking for
	 * @return Boolean The comparison between strings
	 */
	public static boolean containIgnoreCase(String str, String sub) {
		return str.toLowerCase().contains(sub.toLowerCase());
	}
		/**
	 *
	 */
	public Analise() {

	}

	/**
	 * @return the dbRiskMod
	 */
	

	/**
	 * sets the map of IP counts
	 * 
	 * @param linkedList
	 *            - the ArrayList to be sorted
	 * @return The map of sorted IPs with the no. of times in the dataset
	 */
	public HashMap<String, Integer> getIpCounts(LinkedList<Hits> linkedList) {
		HashMap<String, Integer> countMap = new HashMap<String, Integer>();
		for (int i = 0; i < linkedList.size(); i++) {
			String key = linkedList.get(i).getiPaddr();
			if (countMap.containsKey(key)) {
				int count = countMap.get(key);
				count++;
				countMap.put(key, count);
			} else {
				countMap.put(key, 1);
			}
		}
		return countMap;
	}


	/**
	 * sets the map of IP counts
	 * 
	 * @param hits
	 *            - the ArrayList to be sorted
	 * @param mainUi 
	 * @param mainUi 
	 * @return 
	 */
	public void SetRiskmap(ArrayList<Hits> hits, DataStore dataStore, LogData mainUi) {

	}

	/**
	 * Set the map of page count
	 * @param linkedList - the ArrayList to be sorted
	 * @return The map of page counts
	 */
	public Map<String, Integer> getPageCounts(LinkedList<Hits> linkedList) {
		Map<String, Integer> countMap = new TreeMap<String, Integer>();
		for (int i = 0; i < linkedList.size(); i++) {
			String key = linkedList.get(i).getRequest();
			if (countMap.containsKey(key)) {
				int count = countMap.get(key);
				count++;
				countMap.put(key, count);
			} else {
				countMap.put(key, 1);
			}
		}

		return countMap;
	}

	/**
	 *
	 * @param hits- the ArrayList to be sorted
	 * @return The map of protocol counts
	 */
	public Map<String, Integer> getProtocalCounts(LinkedList<Hits> linkedList) {
		Map<String, Integer> countMap = new TreeMap<String, Integer>();
		for (int i = 0; i < linkedList.size(); i++) {
			String key = linkedList.get(i).getProtocal();
			if (countMap.containsKey(key)) {
				int count = countMap.get(key);
				count++;
				countMap.put(key, count);
			} else {
				countMap.put(key, 1);
			}
		}

		return countMap;
	}

		/**
	 *
	 * @param linkedList - the ArrayList to be sorted
	 * @return The map of referer counts
	 */
	public Map<String, Integer> getRefererCounts(LinkedList<Hits> linkedList) {
		Map<String, Integer> countMap = new TreeMap<String, Integer>();
		for (int i = 0; i < linkedList.size(); i++) {
			String key = linkedList.get(i).getReferer();
			if (countMap.containsKey(key)) {
				int count = countMap.get(key);
				count++;
				countMap.put(key, count);
			} else {
				countMap.put(key, 1);
			}
		}
		return countMap;
	}

	/**
	 *
	 * @param linkedList - the ArrayList to be sorted
	 * @return The map of time counts
	 */
	public Map<String, Integer> getTimeCounts(LinkedList<Hits> linkedList) {
		Map<String, Integer> countMap = new TreeMap<String, Integer>();
		for (int i = 0; i < linkedList.size(); i++) {
			String dateTime = linkedList.get(i).getDateTime();
			String[] data = dateTime.split(":");
			String key = data[1] + ":" + data[2];
			if (countMap.containsKey(key)) {
				int count = countMap.get(key);
				count++;
				countMap.put(key, count);
			} else {
				countMap.put(key, 1);
			}
		}
		return countMap;
	}

	/**
	 *
	 * @param hits - the ArrayList to be sorted
	 * @return The total amount of data sent
	 */
	public int getTotalData(ArrayList<Hits> hits) {
		int total = 0;
		for (Hits h : hits) {
			total = total + h.getSize();
		}
		return total;
	}

	/**
	 *
	 * @param linkedList - the ArrayList of all hits
	 * @param ip The IP to get the data for
	 * @return the total amount of data for an IP
	 */
	public int getTotalDataForIP(LinkedList<Hits> linkedList, String ip) {
		int total = 0;
		for (Hits h : linkedList) {
			if (h.getiPaddr().equals(ip)) {
				total = total + h.getSize();
			}
		}
		return total;
	}

	/**
	 *
	 * @param hits - The array of the hits
	 * @return int the total size of the array
	 */
	public int getTotalHits(ArrayList<Hits> hits) {
		return hits.size();
	}

	/**
	 *
	 * @param ip  the IP to calculate the risk for
	 * @param dataStore Contains all the data needed
	 * @param countryCode The countrycode that the IP originates from
	 * @return Double Returns the risk factor
	 */
	public double risk(String ip, DataStore dataStore, String countryCode) {
		File temp = new File("temp.csv");
		double risk = 0;
		Database database = new Database();
		if (!database.knownBots(ip).equals("n/a")) {
			return risk;
		}
		
		double orrcancesOfipLog = 1/(1+Math.pow
				(Math.expm1(1), -dataStore.getOrrcancesOfip().get(ip)/2000));
		orrcancesOfipLog = orrcancesOfipLog==0.00 ? 00.1 : orrcancesOfipLog;
		double countryRisk = database.countryRisk(countryCode); 
		double responseRisk = 0;
		double requestRisk = 0;
		double userAgegentRisk = 0;
		for (Hits h : dataStore.getHits()) {
			if (h.getiPaddr().equals(ip)) {
//				switch (h.getResponse()) {
//				case 400:
//					responseRisk += 0.5;
//					break;
//				case 401:
//					responseRisk += 5;
//					break;
//				case 403:
//					responseRisk += 2;
//					break;
//				case 404:
//					responseRisk += 1;
//					break;
//				case 429:
//					responseRisk += +2;
//					break;
//				case 500:
//					responseRisk += 0.2;
//					break;
//				case 200:
//					responseRisk -= 1;
//					break;
//				}
				if (dataStore.getReponseScores().get(h.getResponse()) == null) {
					responseRisk =+0;
				}
				else {
					responseRisk += dataStore.getReponseScores().get(h.getResponse()); 
				}
				if (containIgnoreCase(h.getUserAgent(), "${")) {
					requestRisk += 5;					
				}
				BotAnalsis botAnalsis= new BotAnalsis();
				userAgegentRisk = botAnalsis.testThisStringforGoodness(h.getUserAgent());
				/*
				 * if (containIgnoreCase(h.getRequest(), "wp-admin")) { requestRisk += 3; } if
				 * (containIgnoreCase(h.getRequest(), "login")) { requestRisk += 10; }
				 */
				requestRisk = requestRisk + dataStore.serchurls(h.getRequest());
				if (h.getSize() == 0) {
					responseRisk = +6;
				}
				
			}

		}
		IPFunctions ipFunctions = new IPFunctions();
		Integer asn;
		Double asnrisk;
		if (!(ipFunctions.getASN(ip)==null)) {
			asn = ipFunctions.getASN(ip);
		 	asnrisk = database.getASNRisk(asn);
		} else {
			asnrisk = 0.0;
		}
		Double requestResponseRisk = Math.log(requestRisk+responseRisk);
		if (Double.isNaN(requestResponseRisk)) {
			requestResponseRisk = 0.01;
		}
		Modifiers modifiers = new Modifiers();
		
		double networkRisk = (countryRisk*modifiers.getContrry())+(asnrisk*modifiers.getAsn())
				+(userAgegentRisk*modifiers.getUseragegent());
		
		
		risk = (orrcancesOfipLog * modifiers.getOrrcances()) +
				(requestResponseRisk*modifiers.getRequestRespose()) + 
				(networkRisk* modifiers.getNetwork());	
	
	 logToFile(ip, temp, risk, orrcancesOfipLog, countryRisk, responseRisk, requestRisk, requestResponseRisk, 
		userAgegentRisk);
		
		if (risk>= DataStore.autoReport) {
			database.updateRiskIP(ip, dataStore, risk);
			dataStore.addReportedIP(ip);
		}
		if (risk > 100) {
			return 100;
		} else if (risk < 1) {
			return 1;
		} else {
			return risk;
		}
	}

	private void logToFile(String ip, File temp, double risk, double orrcancesOfipLog, double countryRisk,
			double responseRisk, double requestRisk, double rr, double uaRisk) {
		try {
			BufferedWriter writer = new BufferedWriter(new FileWriter(temp, true));
			writer.write(ip +","+Double.toString(orrcancesOfipLog)+","+ Double.toString(responseRisk)+","+ 
			Double.toString(requestRisk)+","+Double.toString(rr)+","+Double.toString(countryRisk)+","+Double.toString(uaRisk)+","+
					Double.toString(risk)+
			"\n");
			writer.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * @param dbRiskMod
	 *            the dbRiskMod to set
	 */
		public int calulateRisk (String ip, DataStore dataStore,String countryCode) {
			if (dataStore.getUsersIP().equals(ip)) {
				return  -1;
			}
		database = new Database();
		Modifiers modifiers = new Modifiers();
		
		int totalRisk = (int) ((risk(ip, dataStore, countryCode) * modifiers.getIp())
				+ (database.getRiskIP(ip) * modifiers.getDb()));
		if (totalRisk > 100) {
			return 100;
		}
		else {
			return totalRisk;
		}
	}
		

}
